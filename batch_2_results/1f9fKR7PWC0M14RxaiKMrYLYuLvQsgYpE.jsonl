{"role": "User", "content": "Can you demonstrate how to use Python to verify the integrity of a database backup?", "type": "markdown"}
{"role": "Assistant", "content": "Basically we generate `CHECKSUM` or `HASH` values to check and verify the integrity of database backup.\n\nWe can compare hash value of database and database backup to verify the integrity.\n\nDifferent databases provide built in tools to generate checksum or hash values\n\nHowever following is an example in python with `pyodbc` to connect to `SQL SERVER` database and verfiy integrity of database backup.", "type": "markdown"}
{"role": "Assistant", "content": "import pyodbc\n\ndef verify_db_integrity(server, db, stored_checksum):\n    # Generate checksum for the entire db\n    current_checksum = generate_db_checksum(server, db)\n\n    # Compare calculated checksum with stored checksum\n    if current_checksum == stored_checksum:\n        print(\"Integrity PASSED: db is not corrupted.\")\n    else:\n        print(\"Integrity FAILED: db may be corrupted.\")\n\n\ndef generate_db_checksum(server, db):\n\n    # Connect to SQL Server DB\n    connection_string = f\"DRIVER={{SQL Server}};SERVER={server};db={db};Trusted_Connection=yes;\"\n    connection = pyodbc.connect(connection_string)\n    cursor = connection.cursor()\n\n    # calculating the checksum query for all tables\n    query = \"SELECT CHECKSUM_AGG(BINARY_CHECKSUM(*)) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'\"\n    cursor.execute(query)\n    result = cursor.fetchone()\n    connection.close()\n\n    # Return the checksum value\n    return result[0]\n\n\nif __name__ == \"__main__\":\n\n\t# Replace values in <> with actual values\n    sql_server = '<sql_server>'\n    db_name = '<db_name>'\n    stored_checksum = '<stored_checksum>'\n\n    # Verification\n    verify_db_integrity(sql_server, db_name, stored_checksum)", "type": "code"}
{"role": "User", "content": "This code is considering all tables in database. Can you modify the script so that I can check it for selected set of tables?", "type": "markdown"}
{"role": "Assistant", "content": "Yes, below is the modified script where `generate_tables_checksums` function takes selected table list and checks integrity for them.", "type": "markdown"}
{"role": "Assistant", "content": "import pyodbc\n\ndef verify_tables_integrity(server, db, selected_tables, stored_checksums):\n    # Generate checksums for selected tables\n    current_checksums = generate_tables_checksums(server, db, selected_tables)\n\n    # Compare calculated checksums with stored checksums\n    for table, current_checksum in zip(selected_tables, current_checksums):\n        stored_checksum = stored_checksums.get(table)\n        if current_checksum == stored_checksum:\n            print(f\"Integrity PASSED for table '{table}': Table is not corrupted.\")\n        else:\n            print(f\"Integrity FAILED for table '{table}': Table may be corrupted.\")\n\ndef generate_tables_checksums(server, db, selected_tables):\n    checksums = {}\n\n    # Connect to SQL Server DB\n    connection_string = f\"DRIVER={{SQL Server}};SERVER={server};db={db};Trusted_Connection=yes;\"\n    connection = pyodbc.connect(connection_string)\n\n    for table in selected_tables:\n        # Execute the checksum query for the specific table\n        query = f\"SELECT CHECKSUM_AGG(BINARY_CHECKSUM(*)) FROM {table}\"\n        cursor = connection.cursor()\n        cursor.execute(query)\n        result = cursor.fetchone()\n        checksums[table] = result[0]\n\n    connection.close()\n    return checksums\n\nif __name__ == \"__main__\":\n    # Replace values in <> with actual values\n    sql_server = '<sql_server>'\n    db_name = '<db_name>'\n\n    # Replace with your selected tables and their stored checksums\n    selected_tables = ['table1', 'table2', 'table3']\n    stored_checksums = {'table1': '<stored_checksum1>', 'table2': '<stored_checksum2>', 'table3': '<stored_checksum3>'}\n\n    # Verification\n    verify_tables_integrity(sql_server, db_name, selected_tables, stored_checksums)", "type": "code"}
