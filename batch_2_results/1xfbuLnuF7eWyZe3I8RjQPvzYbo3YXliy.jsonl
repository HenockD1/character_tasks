{"role": "User", "content": "How do I use the __get__ and __set__ methods in a Python descriptor?", "type": "markdown"}
{"role": "Assistant", "content": "Python Descriptors are classes that implement method to manage the access to another class's attributes. Here's an example of a simple descriptor that uses `__get__` and `__set__`:\n\n- `MyDescriptor` is a descriptor class with `__get__` and `__set__` methods.\n- `MyClass` has an attribute named example that is an instance of DescriptorExample.", "type": "markdown"}
{"role": "Assistant", "content": "class MyDescriptor:\n    def __init__(self, initial_value=None):\n        self.value = initial_value        # Initialize a private attribute with a default value\n\n    def __get__(self, obj, objtype=None):\n        return self.value             # Called when descriptor is accessed using dot notation\n\n    def __set__(self, obj, value):\n        self.value = value      # Called when the descriptor is assigned a value\n\nclass MyClass:\n    my_attr = MyDescriptor(initial_value=5)   # Use the descriptor for the 'my_attr' attribute\n\n# Example:\ninstance = MyClass()\nprint(instance.my_attr)   # calls '__get__'\n\ninstance.my_attr = 50\nprint(instance.my_attr)  # calls '__set__'", "type": "code"}
